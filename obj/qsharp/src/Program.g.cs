//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Walks\",\"Name\":\"ConversionTherapy\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":38,\"Item2\":8},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"register\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":37}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"oracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":49},\"Item2\":{\"Line\":1,\"Column\":55}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"ConversionTherapy\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":38,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":28}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"ConversionTherapy\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":38,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":102},\"Item2\":{\"Line\":1,\"Column\":105}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Walks.ConversionTherapy\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Walks\",\"Name\":\"PhaseOracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":50,\"Item2\":8},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":21}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"markingOracle\"]},\"Type\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":35}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"ReturnType\":{\"Case\":\"Operation\",\"Fields\":[{\"Item1\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"Item2\":{\"Case\":\"UnitType\"}},{\"Characteristics\":{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"PhaseOracle\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":50,\"Item2\":8},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":21}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Walks\",\"Name\":\"OddVertexOracle\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":203,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"pos\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"color\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":47}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":59},\"Item2\":{\"Line\":1,\"Column\":65}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"OddVertexOracle\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":203,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"OddVertexOracle\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":203,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Walks.OddVertexOracle\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"OddVertexOracle\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":203,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsControlled specialization for Walks.OddVertexOracle\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"OddVertexOracle\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":203,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Walks.OddVertexOracle\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Walks\",\"Name\":\"ExampleFlipFlop\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":236,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"pos\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":30}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"color\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":42},\"Item2\":{\"Line\":1,\"Column\":47}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"ExampleFlipFlop\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":236,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":26}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"ExampleFlipFlop\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":236,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Walks.ExampleFlipFlop\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"ExampleFlipFlop\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":236,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsControlled specialization for Walks.ExampleFlipFlop\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"ExampleFlipFlop\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":236,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Walks.ExampleFlipFlop\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Walks\",\"Name\":\"ExampleMark\"},\"Attributes\":[],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":246,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"pos\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":23},\"Item2\":{\"Line\":1,\"Column\":26}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"target\"]},\"Type\":{\"Case\":\"Qubit\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":38},\"Item2\":{\"Line\":1,\"Column\":44}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"Qubit\"}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"ExampleMark\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":246,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":22}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"ExampleMark\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":246,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsAdjoint specialization for Walks.ExampleMark\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlled\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"ExampleMark\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":246,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsControlled specialization for Walks.ExampleMark\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsControlledAdjoint\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"Union\",\"Fields\":[{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Adjointable\"}]},{\"Case\":\"SimpleSet\",\"Fields\":[{\"Case\":\"Controllable\"}]}]},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"ExampleMark\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":246,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":2,\"Column\":8},\"Item2\":{\"Line\":2,\"Column\":17}},\"Documentation\":[\"automatically generated QsControlledAdjoint specialization for Walks.ExampleMark\"]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Walks\",\"Name\":\"Test\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Core\",\"Name\":\"EntryPoint\",\"Range\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]}}]},\"TypeIdRange\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":2},\"Item2\":{\"Line\":1,\"Column\":12}}]},\"Argument\":{\"Item1\":{\"Case\":\"UnitValue\"},\"Item2\":[],\"Item3\":{\"Case\":\"UnitType\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Value\",\"Fields\":[{\"Item1\":{\"Line\":1,\"Column\":12},\"Item2\":{\"Line\":1,\"Column\":14}}]}},\"Offset\":{\"Item1\":258,\"Item2\":4},\"Comments\":{\"OpeningComments\":[\" Test av vandring på graf\"],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":259,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"UnitType\"},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Walks\",\"Name\":\"Test\"},\"Attributes\":[],\"SourceFile\":\"/home/thomas/Documents/Quantum_walks/Program.qs\",\"Position\":{\"Item1\":259,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":15}},\"Documentation\":[]}")]
#line hidden
namespace Walks
{
    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.Body, 39, 51)]
    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.Adjoint, 39, 51)]
    public partial class ConversionTherapy : Adjointable<(IQArray<Qubit>,IAdjointable)>, ICallable
    {
        public ConversionTherapy(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IAdjointable)>, IApplyData
        {
            public In((IQArray<Qubit>,IAdjointable) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ConversionTherapy";
        String ICallable.FullName => "Walks.ConversionTherapy";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IAdjointable), QVoid> __Body__ => (__in__) =>
        {
            var (register,oracle) = __in__;
#line hidden
            {
#line 40 "/home/thomas/Documents/Quantum_walks/Program.qs"
                var target = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 42 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(target);
#line 43 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(target);
#line 46 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    oracle.Apply((register, target));
#line 39 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(target);
#line 39 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(target);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(target);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IAdjointable), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (register,oracle) = __in__;
#line 39 "/home/thomas/Documents/Quantum_walks/Program.qs"
            {
#line 39 "/home/thomas/Documents/Quantum_walks/Program.qs"
                var __qsVar0__target__ = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 39 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Apply(__qsVar0__target__);
#line 39 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Apply(__qsVar0__target__);
#line 39 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    oracle.Adjoint.Apply((register, __qsVar0__target__));
#line 39 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__H.Adjoint.Apply(__qsVar0__target__);
#line 39 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(__qsVar0__target__);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__target__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IAdjointable) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> register, IAdjointable oracle)
        {
            return __m__.Run<ConversionTherapy, (IQArray<Qubit>,IAdjointable), QVoid>((register, oracle));
        }
    }

    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.Body, 51, 204)]
    public partial class PhaseOracle : Function<IAdjointable, IAdjointable>, ICallable
    {
        public PhaseOracle(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "PhaseOracle";
        String ICallable.FullName => "Walks.PhaseOracle";
        protected IAdjointable<(IQArray<Qubit>,IAdjointable)> ConversionTherapy__
        {
            get;
            set;
        }

        public override Func<IAdjointable, IAdjointable> __Body__ => (__in__) =>
        {
            var markingOracle = __in__;
#line 52 "/home/thomas/Documents/Quantum_walks/Program.qs"
            return ConversionTherapy__.Partial(new Func<IQArray<Qubit>, (IQArray<Qubit>,IAdjointable)>((__arg1__) => (__arg1__, markingOracle)));
        }

        ;
        public override void __Init__()
        {
            this.ConversionTherapy__ = this.__Factory__.Get<IAdjointable<(IQArray<Qubit>,IAdjointable)>>(typeof(ConversionTherapy));
        }

        public override IApplyData __DataIn__(IAdjointable data) => new QTuple<IAdjointable>(data);
        public override IApplyData __DataOut__(IAdjointable data) => new QTuple<IAdjointable>(data);
        public static System.Threading.Tasks.Task<IAdjointable> Run(IOperationFactory __m__, IAdjointable markingOracle)
        {
            return __m__.Run<PhaseOracle, IAdjointable, IAdjointable>(markingOracle);
        }
    }

    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.Body, 204, 237)]
    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.Adjoint, 204, 237)]
    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.Controlled, 204, 237)]
    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.ControlledAdjoint, 204, 237)]
    public partial class OddVertexOracle : Unitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, ICallable
    {
        public OddVertexOracle(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits, ((IApplyData)Data.Item3)?.Qubits);
                }
            }
        }

        String ICallable.Name => "OddVertexOracle";
        String ICallable.FullName => "Walks.OddVertexOracle";
        protected IUnitary Microsoft__Quantum__Canon__ApplyToEachCA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (pos,color,target) = __in__;
#line 210 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__X, pos));
#line 213 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Apply((QArray<Qubit>.Add(pos, color), target));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, pos));
#line 217 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Apply((QArray<Qubit>.Add(pos, color), target));
#line 221 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[2L]);
#line 224 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Apply((QArray<Qubit>.Add(pos, color), target));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[2L]);
#line 229 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[0L]);
#line 230 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[1L]);
#line 233 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Apply((QArray<Qubit>.Add(pos, color), target));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[1L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[0L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (pos,color,target) = __in__;
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[0L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[1L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((QArray<Qubit>.Add(pos, color), target));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[1L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[0L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[2L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((QArray<Qubit>.Add(pos, color), target));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[2L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((QArray<Qubit>.Add(pos, color), target));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__X, pos));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((QArray<Qubit>.Add(pos, color), target));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, pos));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(pos,color,target)) = __in__;
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__X, pos));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(pos, color), target)));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, pos));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(pos, color), target)));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[2L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(pos, color), target)));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[2L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[0L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[1L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(pos, color), target)));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[1L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[0L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(pos,color,target)) = __in__;
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[0L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[1L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(pos, color), target)));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[1L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[0L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[2L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(pos, color), target)));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[2L]);
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(pos, color), target)));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Apply((Microsoft__Quantum__Intrinsic__X, pos));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (QArray<Qubit>.Add(pos, color), target)));
#line 204 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Canon__ApplyToEachCA.Adjoint.Apply((Microsoft__Quantum__Intrinsic__X, pos));
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Canon__ApplyToEachCA = this.__Factory__.Get<IUnitary>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachCA<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> pos, IQArray<Qubit> color, Qubit target)
        {
            return __m__.Run<OddVertexOracle, (IQArray<Qubit>,IQArray<Qubit>,Qubit), QVoid>((pos, color, target));
        }
    }

    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.Body, 237, 247)]
    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.Adjoint, 237, 247)]
    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.Controlled, 237, 247)]
    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.ControlledAdjoint, 237, 247)]
    public partial class ExampleFlipFlop : Unitary<(IQArray<Qubit>,IQArray<Qubit>)>, ICallable
    {
        public ExampleFlipFlop(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ExampleFlipFlop";
        String ICallable.FullName => "Walks.ExampleFlipFlop";
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)> OddVertexOracle__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (pos,color) = __in__;
#line hidden
            {
#line 239 "/home/thomas/Documents/Quantum_walks/Program.qs"
                var anc = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 240 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    OddVertexOracle__.Apply((pos, color, anc));
#line 241 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(color[0L]), pos[0L]));
#line 242 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(color[1L]), pos[1L]));
#line 243 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Apply((new QArray<Qubit>(anc), pos[2L]));
#line 244 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    OddVertexOracle__.Apply((pos, color, anc));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(anc);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,IQArray<Qubit>), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (pos,color) = __in__;
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
            {
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                var __qsVar0__anc__ = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    OddVertexOracle__.Adjoint.Apply((pos, color, __qsVar0__anc__));
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((new QArray<Qubit>(__qsVar0__anc__), pos[2L]));
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((new QArray<Qubit>(color[1L]), pos[1L]));
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((new QArray<Qubit>(color[0L]), pos[0L]));
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    OddVertexOracle__.Adjoint.Apply((pos, color, __qsVar0__anc__));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__anc__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(pos,color)) = __in__;
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
            {
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                var anc = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    OddVertexOracle__.Controlled.Apply((__controlQubits__, (pos, color, anc)));
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(color[0L]), pos[0L])));
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(color[1L]), pos[1L])));
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(anc), pos[2L])));
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    OddVertexOracle__.Controlled.Apply((__controlQubits__, (pos, color, anc)));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(anc);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,IQArray<Qubit>)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(pos,color)) = __in__;
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
            {
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                var __qsVar0__anc__ = Allocate__.Apply();
#line hidden
                bool __arg1__ = true;
                try
                {
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    OddVertexOracle__.Adjoint.Controlled.Apply((__controlQubits__, (pos, color, __qsVar0__anc__)));
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(__qsVar0__anc__), pos[2L])));
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(color[1L]), pos[1L])));
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (new QArray<Qubit>(color[0L]), pos[0L])));
#line 237 "/home/thomas/Documents/Quantum_walks/Program.qs"
                    OddVertexOracle__.Adjoint.Controlled.Apply((__controlQubits__, (pos, color, __qsVar0__anc__)));
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(__qsVar0__anc__);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.OddVertexOracle__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>,Qubit)>>(typeof(OddVertexOracle));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> pos, IQArray<Qubit> color)
        {
            return __m__.Run<ExampleFlipFlop, (IQArray<Qubit>,IQArray<Qubit>), QVoid>((pos, color));
        }
    }

    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.Body, 247, 260)]
    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.Adjoint, 247, 260)]
    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.Controlled, 247, 260)]
    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.ControlledAdjoint, 247, 260)]
    public partial class ExampleMark : Unitary<(IQArray<Qubit>,Qubit)>, ICallable
    {
        public ExampleMark(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(IQArray<Qubit>,Qubit)>, IApplyData
        {
            public In((IQArray<Qubit>,Qubit) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item1)?.Qubits, ((IApplyData)Data.Item2)?.Qubits);
                }
            }
        }

        String ICallable.Name => "ExampleMark";
        String ICallable.FullName => "Walks.ExampleMark";
        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        public override Func<(IQArray<Qubit>,Qubit), QVoid> __Body__ => (__in__) =>
        {
            var (pos,target) = __in__;
#line 251 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[1L]);
#line 254 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Apply((pos, target));
#line 247 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[1L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,Qubit), QVoid> __AdjointBody__ => (__in__) =>
        {
            var (pos,target) = __in__;
#line 247 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[1L]);
#line 247 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Apply((pos, target));
#line 247 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[1L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,Qubit)), QVoid> __ControlledBody__ => (__in__) =>
        {
            var (__controlQubits__,(pos,target)) = __in__;
#line 247 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[1L]);
#line 247 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Controlled.Apply((__controlQubits__, (pos, target)));
#line 247 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[1L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override Func<(IQArray<Qubit>,(IQArray<Qubit>,Qubit)), QVoid> __ControlledAdjointBody__ => (__in__) =>
        {
            var (__controlQubits__,(pos,target)) = __in__;
#line 247 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(pos[1L]);
#line 247 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Controlled.Adjoint.Controlled.Apply((__controlQubits__, (pos, target)));
#line 247 "/home/thomas/Documents/Quantum_walks/Program.qs"
            Microsoft__Quantum__Intrinsic__X.Adjoint.Apply(pos[1L]);
#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
        }

        public override IApplyData __DataIn__((IQArray<Qubit>,Qubit) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, IQArray<Qubit> pos, Qubit target)
        {
            return __m__.Run<ExampleMark, (IQArray<Qubit>,Qubit), QVoid>((pos, target));
        }
    }

    [SourceLocation("/home/thomas/Documents/Quantum_walks/Program.qs", OperationFunctor.Body, 260, -1)]
    public partial class Test : Operation<QVoid, QVoid>, ICallable
    {
        public Test(IOperationFactory m) : base(m)
        {
        }

        String ICallable.Name => "Test";
        String ICallable.FullName => "Walks.Test";
        public static EntryPointInfo<QVoid, QVoid> Info => new EntryPointInfo<QVoid, QVoid>(typeof(Test));
        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected IUnitary Microsoft__Quantum__Canon__ApplyToEachCA
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<IAdjointable, IAdjointable> PhaseOracle__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,Qubit)> ExampleMark__
        {
            get;
            set;
        }

        protected IUnitary<(IQArray<Qubit>,IQArray<Qubit>)> ExampleFlipFlop__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Diagnostics__DumpMachine
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<QVoid, QVoid> __Body__ => (__in__) =>
        {
#line hidden
            {
#line 261 "/home/thomas/Documents/Quantum_walks/Program.qs"
                var pos = Allocate__.Apply(3L);
#line hidden
                bool __arg1__ = true;
                try
                {
#line hidden
                    {
#line 262 "/home/thomas/Documents/Quantum_walks/Program.qs"
                        var color = Allocate__.Apply(2L);
#line hidden
                        bool __arg2__ = true;
                        try
                        {
#line 263 "/home/thomas/Documents/Quantum_walks/Program.qs"
                            var ExampleCoin = Microsoft__Quantum__Canon__ApplyToEachCA.Partial(new Func<IQArray<Qubit>, (IUnitary,IQArray<Qubit>)>((__arg3__) => (Microsoft__Quantum__Intrinsic__H, __arg3__)));
#line 264 "/home/thomas/Documents/Quantum_walks/Program.qs"
                            var phaseOracle = PhaseOracle__.Apply(ExampleMark__);
#line 272 "/home/thomas/Documents/Quantum_walks/Program.qs"
                            foreach (var i in new QRange(1L, 2L))
#line hidden
                            {
#line 273 "/home/thomas/Documents/Quantum_walks/Program.qs"
                                phaseOracle.Apply(pos);
#line 274 "/home/thomas/Documents/Quantum_walks/Program.qs"
                                ExampleCoin.Apply(color);
#line 275 "/home/thomas/Documents/Quantum_walks/Program.qs"
                                ExampleFlipFlop__.Apply((pos, color));
                            }

#line 278 "/home/thomas/Documents/Quantum_walks/Program.qs"
                            Microsoft__Quantum__Diagnostics__DumpMachine.Apply(QVoid.Instance);
#line 283 "/home/thomas/Documents/Quantum_walks/Program.qs"
                            ResetAll__.Apply(color);
#line 284 "/home/thomas/Documents/Quantum_walks/Program.qs"
                            ResetAll__.Apply(pos);
                        }
#line hidden
                        catch
                        {
                            __arg2__ = false;
                            throw;
                        }
#line hidden
                        finally
                        {
                            if (__arg2__)
                            {
#line hidden
                                Release__.Apply(color);
                            }
                        }
                    }
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(pos);
                    }
                }
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEachCA = this.__Factory__.Get<IUnitary>(typeof(global::Microsoft.Quantum.Canon.ApplyToEachCA<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.PhaseOracle__ = this.__Factory__.Get<ICallable<IAdjointable, IAdjointable>>(typeof(PhaseOracle));
            this.ExampleMark__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,Qubit)>>(typeof(ExampleMark));
            this.ExampleFlipFlop__ = this.__Factory__.Get<IUnitary<(IQArray<Qubit>,IQArray<Qubit>)>>(typeof(ExampleFlipFlop));
            this.Microsoft__Quantum__Diagnostics__DumpMachine = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Diagnostics.DumpMachine<>));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__(QVoid data) => data;
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__)
        {
            return __m__.Run<Test, QVoid, QVoid>(QVoid.Instance);
        }
    }
}